# Copyright 2018 Bailey Defino
# <https://bdefino.github.io>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
import url

__doc__ = "link selection rules"

class Rule:
    """
    the base class for a link selection rule
    
    this is called for every link generated by the callback
    """

    def __init__(self, url_class = url.DEFAULT_URL_CLASS):
        self.url_class = url_class

    def __call__(self, link):
        """
        return whether a link statisfies this rule
        or raise a RuleApplicationError
        
        defaults to True
        """
        return True

class DomainRule(Rule):
    """keeps links within a set of domains"""
    
    def __init__(self, allowed_domains = (), *args, **kwargs):
        Rule.__init__(self, *args, **kwargs)
        self.allowed_domains = {self.url_class(d)._domains()
            for d in set(allowed_domains)} # canonical form

    def __call__(self, link):
        """
        return whether a link's domain is allowed
        or raise a RuleApplicationError
        """
        try:
            return self.url_class(link)._domains() in self.allowed_domains
        except (IndexError, IOError, SyntaxError, TypeError, ValueError):
            raise RuleError()

class RuleApplicationError(RuntimeError):
    """there was a problem enforcing a rule"""
    
    def __init__(self, message = "unable to enforce rule"):
        RuntimeError.__init__(self, message)
